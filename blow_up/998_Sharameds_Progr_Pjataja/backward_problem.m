% N,M число узлов по координате и времени;
% tau шаг по времени, h шаг по координате;
% InterpolateB инетерполированое значение b в точке n+1/2
% u0x,uNx,u0t граничные и начальное значени€ (√” и Ќ”)
% fright права€ часть уравени€
% x_left, x_right - границы области
% eps, q(x) параметр уравнени€

function psi=backward_problem(N,M,tau,psi0x,psiNx,psiMt,q,h,eps,u)

for i=1:N+1 % начальное условие
    psi(i,M+1)=psiMt(i);
end

for i=1:N-1 %единична€ матрица
    E(i,i)=1;
end

ii=(-1)^(1/2); % мнима€ единица

for j=M+1:-1:2 % цикл по времени
     
% права€ часть уравнени€ дл€ dx/dt-----------------------------------------
    for i=3:N-1
        f(i)=-eps*(psi(i+1,j)-2*psi(i,j)+psi(i-1,j))/(h^2)+u(i,j)*(psi(i+1,j)-psi(i-1,j))/(2*h)+psi(i,j)*q(i);
    end
    f(2)=-eps*(psi(3,j)-2*psi(2,j)+psi0x(j))/(h^2)+u(2,j)*(psi(3,j)-psi0x(j))/(2*h)+psi(2,j)*q(2);
    f(N)=-eps*(psiNx(j)-2*psi(N,j)+psi(N-1,j))/(h^2)+u(N,j)*(psiNx(j)-psi(N-1,j))/(2*h)+psi(N,j)*q(N);
%--------------------------------------------------------------------------
% задание матрицы €коби----------------------------------------------------
    for i=3:N-1 % матрица в узлах не включающих √”
        fu(i,i)=(2*eps/h^2)+q(i);
        fu(i,i-1)=-(eps/h^2)-u(i,j)/(2*h);
        fu(i,i+1)=-(eps/h^2)+u(i,j)/(2*h);
    end
    % √”
    fu(2,2)=(2*eps/h^2)+q(2);
    fu(2,3)= -(eps/h^2)+u(2,j)/(2*h);
    fu(N,N)=(2*eps/h^2)+q(N);
    fu(N,N-1)= -(eps/h^2)-u(2,j)/(2*h);
%-------------------------------------------------------------------------
% переопределение матриц (тк fu и f не учитывет граничные точки)
% следовательно размерность на 2 меньше чем у задачи
    for i=1:N-1
        for m=1:N-1
            Fu(i,m)=fu(i+1,m+1);
        end
    end
    for i=1:N-1
        F(i,1)=f(i+1);
    end
    for i=1:N-1
        uu(i,j)=psi(i+1,j);
    end
%--------------------------------------------------------------------------
    % вычисление w
    w=((E+(tau*(1+ii)/2)*Fu)^(-1))*F;
    
    % формула эйлера
    uu(:,j-1)=uu(:,j)-tau*real(w);
    
    for i=2:N
        psi(i,j-1)=uu(i-1,j-1);
    end
    psi(1,j-1)=psi0x(j-1);
    psi(N+1,j-1)=psiNx(j-1);
end
end